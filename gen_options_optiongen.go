// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package siid

import (
	"math"
	"sync/atomic"
	"time"
	"unsafe"
)

// Options should use NewConfig to initialize it
type Options struct {
	Limitation                 uint64              `xconf:"limitation" usage:"id最大限制，超过该值则会报ErrReachIdLimitation错误"`
	OffsetWhenAutoCreateDomain uint64              `xconf:"offset_when_auto_create_domain" usage:"当新建新的domain时，偏移多少开始自增，即预留值"`
	RenewPercent               int                 `xconf:"renew_percent" usage:"renew百分比，当id达到百分比值时，会去server端或db拿新的id段"`
	RenewRetryDelay            RenewRetryDelayFunc `xconf:"renew_retry_delay" usage:"renew失败重试函数，默认10ms重试一次"`
	RenewTimeout               time.Duration       `xconf:"renew_timeout" usage:"renew超时"`
	RenewRetry                 int                 `xconf:"renew_retry" usage:"renew重试次数"`
	SegmentDuration            time.Duration       `xconf:"segment_duration" usage:"设定segment长度，renew号段尺寸调节的目的是使号段消耗稳定趋于SegmentDuration内。降低SegmentDuration，可以更迅速使缓存的号段达到设定的最大数值以提高吞吐能力"`
	MinQuantum                 uint64              `xconf:"min_quantum" usage:"根据renew请求频率自动伸缩的请求id缓存段，最小段长"`
	MaxQuantum                 uint64              `xconf:"max_quantum" usage:"最大段长"`
	InitialQuantum             uint64              `xconf:"initial_quantum" usage:"初始化段长"`
	EnableSlow                 bool                `xconf:"enable_slow" usage:"是否开启慢日志"`
	SlowQuery                  time.Duration       `xconf:"slow_query" usage:"慢日志最小时长，大于该时长将输出日志"`
	EnableTimeSummary          bool                `xconf:"enable_time_summary" usage:"是否开启Next/MustNext接口的time监控，否则为统计监控"`
	Development                bool                `xconf:"development" usage:"是否为开发模式"`
}

// NewConfig new Options
func NewConfig(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Options) ApplyOption(opts ...Option) []Option {
	var previous []Option
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// Option option func
type Option func(cc *Options) Option

// WithLimitation id最大限制，超过该值则会报ErrReachIdLimitation错误
func WithLimitation(v uint64) Option {
	return func(cc *Options) Option {
		previous := cc.Limitation
		cc.Limitation = v
		return WithLimitation(previous)
	}
}

// WithOffsetWhenAutoCreateDomain 当新建新的domain时，偏移多少开始自增，即预留值
func WithOffsetWhenAutoCreateDomain(v uint64) Option {
	return func(cc *Options) Option {
		previous := cc.OffsetWhenAutoCreateDomain
		cc.OffsetWhenAutoCreateDomain = v
		return WithOffsetWhenAutoCreateDomain(previous)
	}
}

// WithRenewPercent renew百分比，当id达到百分比值时，会去server端或db拿新的id段
func WithRenewPercent(v int) Option {
	return func(cc *Options) Option {
		previous := cc.RenewPercent
		cc.RenewPercent = v
		return WithRenewPercent(previous)
	}
}

// WithRenewRetryDelay renew失败重试函数，默认10ms重试一次
func WithRenewRetryDelay(v RenewRetryDelayFunc) Option {
	return func(cc *Options) Option {
		previous := cc.RenewRetryDelay
		cc.RenewRetryDelay = v
		return WithRenewRetryDelay(previous)
	}
}

// WithRenewTimeout renew超时
func WithRenewTimeout(v time.Duration) Option {
	return func(cc *Options) Option {
		previous := cc.RenewTimeout
		cc.RenewTimeout = v
		return WithRenewTimeout(previous)
	}
}

// WithRenewRetry renew重试次数
func WithRenewRetry(v int) Option {
	return func(cc *Options) Option {
		previous := cc.RenewRetry
		cc.RenewRetry = v
		return WithRenewRetry(previous)
	}
}

// WithSegmentDuration 设定segment长度，renew号段尺寸调节的目的是使号段消耗稳定趋于SegmentDuration内。降低SegmentDuration，可以更迅速使缓存的号段达到设定的最大数值以提高吞吐能力
func WithSegmentDuration(v time.Duration) Option {
	return func(cc *Options) Option {
		previous := cc.SegmentDuration
		cc.SegmentDuration = v
		return WithSegmentDuration(previous)
	}
}

// WithMinQuantum 根据renew请求频率自动伸缩的请求id缓存段，最小段长
func WithMinQuantum(v uint64) Option {
	return func(cc *Options) Option {
		previous := cc.MinQuantum
		cc.MinQuantum = v
		return WithMinQuantum(previous)
	}
}

// WithMaxQuantum 最大段长
func WithMaxQuantum(v uint64) Option {
	return func(cc *Options) Option {
		previous := cc.MaxQuantum
		cc.MaxQuantum = v
		return WithMaxQuantum(previous)
	}
}

// WithInitialQuantum 初始化段长
func WithInitialQuantum(v uint64) Option {
	return func(cc *Options) Option {
		previous := cc.InitialQuantum
		cc.InitialQuantum = v
		return WithInitialQuantum(previous)
	}
}

// WithEnableSlow 是否开启慢日志
func WithEnableSlow(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.EnableSlow
		cc.EnableSlow = v
		return WithEnableSlow(previous)
	}
}

// WithSlowQuery 慢日志最小时长，大于该时长将输出日志
func WithSlowQuery(v time.Duration) Option {
	return func(cc *Options) Option {
		previous := cc.SlowQuery
		cc.SlowQuery = v
		return WithSlowQuery(previous)
	}
}

// WithEnableTimeSummary 是否开启Next/MustNext接口的time监控，否则为统计监控
func WithEnableTimeSummary(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.EnableTimeSummary
		cc.EnableTimeSummary = v
		return WithEnableTimeSummary(previous)
	}
}

// WithDevelopment 是否为开发模式
func WithDevelopment(v bool) Option {
	return func(cc *Options) Option {
		previous := cc.Development
		cc.Development = v
		return WithDevelopment(previous)
	}
}

// InstallOptionsWatchDog the installed func will called when NewConfig  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithLimitation(math.MaxUint64),
		WithOffsetWhenAutoCreateDomain(30000000),
		WithRenewPercent(20),
		WithRenewRetryDelay(defaultRenewRetryDelayFunc),
		WithRenewTimeout(5 * time.Second),
		WithRenewRetry(99),
		WithSegmentDuration(900 * time.Second),
		WithMinQuantum(30),
		WithMaxQuantum(3000),
		WithInitialQuantum(30),
		WithEnableSlow(true),
		WithSlowQuery(30 * time.Millisecond),
		WithEnableTimeSummary(false),
		WithDevelopment(true),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *Options) AtomicSetFunc() func(interface{}) { return AtomicOptionsSet }

// atomicOptions global *Options holder
var atomicOptions unsafe.Pointer

// onAtomicOptionsSet global call back when  AtomicOptionsSet called by XConf.
// use OptionsInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicOptions
var onAtomicOptionsSet func(cc OptionsInterface) bool

// InstallCallbackOnAtomicOptionsSet install callback
func InstallCallbackOnAtomicOptionsSet(callback func(cc OptionsInterface) bool) {
	onAtomicOptionsSet = callback
}

// AtomicOptionsSet atomic setter for *Options
func AtomicOptionsSet(update interface{}) {
	cc := update.(*Options)
	if onAtomicOptionsSet != nil && !onAtomicOptionsSet(cc) {
		return
	}
	atomic.StorePointer(&atomicOptions, (unsafe.Pointer)(cc))
}

// AtomicOptions return atomic *OptionsVisitor
func AtomicOptions() OptionsVisitor {
	current := (*Options)(atomic.LoadPointer(&atomicOptions))
	if current == nil {
		defaultOne := newDefaultOptions()
		if watchDogOptions != nil {
			watchDogOptions(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicOptions, nil, (unsafe.Pointer)(defaultOne))
		return (*Options)(atomic.LoadPointer(&atomicOptions))
	}
	return current
}

// all getter func
func (cc *Options) GetLimitation() uint64                   { return cc.Limitation }
func (cc *Options) GetOffsetWhenAutoCreateDomain() uint64   { return cc.OffsetWhenAutoCreateDomain }
func (cc *Options) GetRenewPercent() int                    { return cc.RenewPercent }
func (cc *Options) GetRenewRetryDelay() RenewRetryDelayFunc { return cc.RenewRetryDelay }
func (cc *Options) GetRenewTimeout() time.Duration          { return cc.RenewTimeout }
func (cc *Options) GetRenewRetry() int                      { return cc.RenewRetry }
func (cc *Options) GetSegmentDuration() time.Duration       { return cc.SegmentDuration }
func (cc *Options) GetMinQuantum() uint64                   { return cc.MinQuantum }
func (cc *Options) GetMaxQuantum() uint64                   { return cc.MaxQuantum }
func (cc *Options) GetInitialQuantum() uint64               { return cc.InitialQuantum }
func (cc *Options) GetEnableSlow() bool                     { return cc.EnableSlow }
func (cc *Options) GetSlowQuery() time.Duration             { return cc.SlowQuery }
func (cc *Options) GetEnableTimeSummary() bool              { return cc.EnableTimeSummary }
func (cc *Options) GetDevelopment() bool                    { return cc.Development }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetLimitation() uint64
	GetOffsetWhenAutoCreateDomain() uint64
	GetRenewPercent() int
	GetRenewRetryDelay() RenewRetryDelayFunc
	GetRenewTimeout() time.Duration
	GetRenewRetry() int
	GetSegmentDuration() time.Duration
	GetMinQuantum() uint64
	GetMaxQuantum() uint64
	GetInitialQuantum() uint64
	GetEnableSlow() bool
	GetSlowQuery() time.Duration
	GetEnableTimeSummary() bool
	GetDevelopment() bool
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option) []Option
}
